{
  "version": 3,
  "sources": ["../../../../../apps/pasigono/pasigono/custom_scripts/pos_scripts/pos_mettler_toledo.js"],
  "sourcesContent": ["var port;\nvar textEncoder;\nvar weight = 0;\nvar weightLoop = false;\nvar portConnected = false;\nvar reader;\n/*window.writer;\nerpnext.PointOfSale.Toledo.connect = async function(){\n\twindow.port = await navigator.serial.getPorts();\n\tawait window.port.open({baudRate: 9600, dataBits: 7, parity: \"even\", stopBits: 1});\n\treceiveData();\n\tconst textEncoder = new TextEncoderStream();\n\ttextEncoder.readable.pipeTo(window.port.writable);\n\twindow.writer = textEncoder.writable.getWriter();\n\twindow.setInterval(getweight, 1000);\n}\n\nerpnext.PointOfSale.Toledo.getWeight = async function(){\n\tasync function getweight(){\n\t\t// Prompt user to select any serial port.\n\t\tawait window.writer.write(\"W\");\n\t}\n}*/\n\nonmessage = function(message){\n\tif(message.data.command == \"connect\"){\n\t\tconnectPort();\n\t}\n    else if(message.data.command == \"start\")\n    {\n\t\tconsole.log(\"Start called\");\n\t\tweightLoop = true;\n        startWeight();\n    }\n\telse if(message.data.command == \"stop\"){\n\t\tweightLoop = false;\n\t}\n}\n\nasync function connectPort(){\n\tvar portFound = false;\n    var ports = await navigator.serial.getPorts();\n\ttextEncoder = new TextEncoderStream();\n\tif(ports.length > 0){\n\t\t\n\t\tport = ports[0];\n\t\tvar stop = false;\n\t\ttry{\n\t\t\tawait port.open({baudRate: 9600, dataBits: 7, parity: \"even\", stopBits: 1});\n\t\t\ttextEncoder.readable.pipeTo(port.writable);\n\t\t\treader = port.readable.getReader();\n\t\t\tportConnected = true;\n\t\t}\n\t\tcatch(error){\n\t\t\t//TODO: Catch connection errors\n\t\t}\n\t}\n}\n\nasync function startWeight(){\n\tif(portConnected){\n\t\tconsole.log(\"Port connected\");\n\t\ttry{\n\t\t\tvar strWeight = \"\";\n\t\t\tawait sendCommand(\"W\");\n\t\t}catch(error){\n\t\t\t//TODO: Catch error if port already connected\n\t\t}\n\t\twhile(port.readable){\n\t\t\tif(!weightLoop){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttry{\n\t\t\t\twhile(true){\n\t\t\t\t\tif(!weightLoop){\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst {value, done} = await reader.read();\n\t\t\t\t\tif(done){\n\t\t\t\t\t\t//reader.releaseLock();\n\t\t\t\t\t}\n\t\t\t\t\tif(value){\n\t\t\t\t\t\tvar [response, completed] = await decodeData(value);\n\t\t\t\t\t\tif(!completed){\n\t\t\t\t\t\t\tstrWeight.concat(response);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t//If all the result is returned in a single chunk\n\t\t\t\t\t\t\tif(strWeight == \"\"){\n\t\t\t\t\t\t\t\tstrWeight = response;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\tstrWeight.concat(response)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar newWeight = parseFloat(strWeight);\n\t\t\t\t\t\t\tconsole.log({\"new weight\": newWeight});\n\t\t\t\t\t\t\tif(newWeight != weight && !isNaN(newWeight)){\n\t\t\t\t\t\t\t\tweight = newWeight;\n\t\t\t\t\t\t\t\tpostMessage({\n\t\t\t\t\t\t\t\t\t\"message\": \"weight\",\n\t\t\t\t\t\t\t\t\t\"weight\": weight\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsetTimeout(async function(){\n\t\t\t\t\t\t\t\t//Wait for 500ms to give the weight device time to process result \n\t\t\t\t\t\t\t\t//and give script time to accept new command\n\t\t\t\t\t\t\t\tstrWeight = \"\";\n\t\t\t\t\t\t\t\tawait sendCommand(\"W\");\n\t\t\t\t\t\t\t}, 500);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}catch(error){\n\t\t\t\t//TODO: Catch errors relating to writing and reading from port\n\t\t\t\tconsole.log(error.message);\n\t\t\t} finally{\n\t\t\t\t//reader.releaseLock();\n\t\t\t}\n\t\t}\n\t}\n\telse{\n\t\t//TODO: Call function to connect device then read weight\n\t}\n}\n\nasync function sendCommand(command){\n\ttry{\n\t\tvar writer = textEncoder.writable.getWriter();\n\t\tawait writer.write(command);\n\t\twriter.releaseLock();\n\t\t//writer.close();\n\t}\n\tcatch(error){\n\t\tconsole.log(error.message);\n\t}\n}\n\nasync function decodeData(data){\n\tvar str = \"\";\n\tvar completed = false;\n\tfor(var i = 0; i < data.byteLength; i++){\n\t\t//Check if the value is not the ASCII STR (Start of Text) character\n\t\t//Or is an ASCII cr indicating that the weight has been completely sent\n\t\tif(data[i] != 2){\n\t\t\tif(data[i] == 13){\n\t\t\t\tcompleted = true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tstr = str.concat(String.fromCharCode(data[i]));\n\t\t\t}\n\t\t}\n\t}\n\treturn [str, completed];\n}\n\n"],
  "mappings": ";;AAAA,MAAI;AACJ,MAAI;AACJ,MAAI,SAAS;AACb,MAAI,aAAa;AACjB,MAAI,gBAAgB;AACpB,MAAI;AAmBJ,cAAY,SAAS,SAAQ;AAC5B,QAAG,QAAQ,KAAK,WAAW,WAAU;AACpC,kBAAY;AAAA,IACb,WACW,QAAQ,KAAK,WAAW,SAChC;AACF,cAAQ,IAAI,cAAc;AAC1B,mBAAa;AACP,kBAAY;AAAA,IAChB,WACK,QAAQ,KAAK,WAAW,QAAO;AACtC,mBAAa;AAAA,IACd;AAAA,EACD;AAEA,+BAA4B;AAC3B,QAAI,YAAY;AACb,QAAI,QAAQ,MAAM,UAAU,OAAO,SAAS;AAC/C,kBAAc,IAAI,kBAAkB;AACpC,QAAG,MAAM,SAAS,GAAE;AAEnB,aAAO,MAAM;AACb,UAAI,OAAO;AACX,UAAG;AACF,cAAM,KAAK,KAAK,EAAC,UAAU,MAAM,UAAU,GAAG,QAAQ,QAAQ,UAAU,EAAC,CAAC;AAC1E,oBAAY,SAAS,OAAO,KAAK,QAAQ;AACzC,iBAAS,KAAK,SAAS,UAAU;AACjC,wBAAgB;AAAA,MACjB,SACM,OAAN;AAAA,MAEA;AAAA,IACD;AAAA,EACD;AAEA,+BAA4B;AAC3B,QAAG,eAAc;AAChB,cAAQ,IAAI,gBAAgB;AAC5B,UAAG;AACF,YAAI,YAAY;AAChB,cAAM,YAAY,GAAG;AAAA,MACtB,SAAO,OAAN;AAAA,MAED;AACA,aAAM,KAAK,UAAS;AACnB,YAAG,CAAC,YAAW;AACd;AAAA,QACD;AACA,YAAG;AACF,iBAAM,MAAK;AACV,gBAAG,CAAC,YAAW;AACd;AAAA,YACD;AACA,kBAAM,EAAC,OAAO,SAAQ,MAAM,OAAO,KAAK;AACxC,gBAAG,MAAK;AAAA,YAER;AACA,gBAAG,OAAM;AACR,kBAAI,CAAC,UAAU,aAAa,MAAM,WAAW,KAAK;AAClD,kBAAG,CAAC,WAAU;AACb,0BAAU,OAAO,QAAQ;AAAA,cAC1B,OACI;AAEH,oBAAG,aAAa,IAAG;AAClB,8BAAY;AAAA,gBACb,OACI;AACH,4BAAU,OAAO,QAAQ;AAAA,gBAC1B;AACA,oBAAI,YAAY,WAAW,SAAS;AACpC,wBAAQ,IAAI,EAAC,cAAc,UAAS,CAAC;AACrC,oBAAG,aAAa,UAAU,CAAC,MAAM,SAAS,GAAE;AAC3C,2BAAS;AACT,8BAAY;AAAA,oBACX,WAAW;AAAA,oBACX,UAAU;AAAA,kBACX,CAAC;AAAA,gBACF;AACA,2BAAW,iBAAgB;AAG1B,8BAAY;AACZ,wBAAM,YAAY,GAAG;AAAA,gBACtB,GAAG,GAAG;AAAA,cACP;AAAA,YACD;AAAA,UACD;AAAA,QACD,SAAO,OAAN;AAEA,kBAAQ,IAAI,MAAM,OAAO;AAAA,QAC1B,UAAE;AAAA,QAEF;AAAA,MACD;AAAA,IACD,OACI;AAAA,IAEJ;AAAA,EACD;AAEA,6BAA2B,SAAQ;AAClC,QAAG;AACF,UAAI,SAAS,YAAY,SAAS,UAAU;AAC5C,YAAM,OAAO,MAAM,OAAO;AAC1B,aAAO,YAAY;AAAA,IAEpB,SACM,OAAN;AACC,cAAQ,IAAI,MAAM,OAAO;AAAA,IAC1B;AAAA,EACD;AAEA,4BAA0B,MAAK;AAC9B,QAAI,MAAM;AACV,QAAI,YAAY;AAChB,aAAQ,IAAI,GAAG,IAAI,KAAK,YAAY,KAAI;AAGvC,UAAG,KAAK,MAAM,GAAE;AACf,YAAG,KAAK,MAAM,IAAG;AAChB,sBAAY;AAAA,QACb,OACI;AACH,gBAAM,IAAI,OAAO,OAAO,aAAa,KAAK,EAAE,CAAC;AAAA,QAC9C;AAAA,MACD;AAAA,IACD;AACA,WAAO,CAAC,KAAK,SAAS;AAAA,EACvB;",
  "names": []
}
